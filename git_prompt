#!/bin/bash

BLACK="\033[0;30m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
MAGENTA="\033[0;35m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"

BOLD_BLACK="\033[1;30m"
BOLD_RED="\033[1;31m"
BOLD_GREEN="\033[1;32m"
BOLD_YELLOW="\033[1;33m"
BOLD_BLUE="\033[1;34m"
BOLD_MAGENTA="\033[1;35m"
BOLD_CYAN="\033[1;36m"
BOLD_WHITE="\033[1;37m"

RESET="\033[0m"

CHAR_STAGED='+'
CHAR_UNSTAGED='*'
CHAR_UNTRACKED='?'
CHAR_CONFLICT='!'
CHAR_AHEAD='Δ'
CHAR_BEHIND='∇'
CHAR_STASH='$'

function git_branch() {
  # get the repo info
  local branch_name=$(git branch --show-current 2> /dev/null)
  local git_path=$(git rev-parse --show-toplevel 2> /dev/null)
  local git_shorthash=$(git rev-parse --short HEAD 2> /dev/null)

  # check if we are in a special state
  local is_merging=$([[ -f .git/MERGE_HEAD ]] && echo 1)
  local is_rebasing=$([[ -d .git/rebase-apply  || -d "$git_path"/.git/rebase-merge ]] && echo 1)
  local is_cherry_picking=$([[ -f .git/CHERRY_PICK_HEAD ]] && echo 1)
  local is_bisecting=$([[ -f .git/BISECT_LOG ]] && echo 1)
  local is_detached=$([[ -z "$branch_name" ]] && echo 1)

  # apply the appropriate modifications
  local output="$branch_name"
  [[ -n "$is_detached" ]] && output="($git_shorthash)"
  [[ -n "$is_merging" ]] && output+="|MERGE"
  [[ -n "$is_rebasing" ]] && output+="|REBASE"
  [[ -n "$is_cherry_picking" ]] && output+="|CHERRY-PICK"
  [[ -n "$is_bisecting" ]] && output+="|BISECT"

  echo "$output"
}

function git_state() {
  # ## string showing various kinds of working tree state
  #
  # - `!` conflicted state
  # - `?` untracked files
  # - `*` unstaged changes
  # - `+` staged changes
  #
  # - `∆[n]` ahead of remote (by n commits)
  # - `∇[n]` behind remote (by n commits)
  # - `$[n]` stashed changes (n stashes)
  #
  local status=$(git status --porcelain 2> /dev/null)
  local stashes=$(git stash list 2> /dev/null | wc -l)
  local ahead=$(git rev-list --count @{u}..HEAD 2> /dev/null)
  local behind=$(git rev-list --count HEAD..@{u} 2> /dev/null)
  local output=""

  [[ -n $(grep '^[MADRC]' <<< "$status") ]] && output+=$CHAR_STAGED
  [[ -n $(grep '^.[MD]' <<< "$status") ]] && output+="$CHAR_UNSTAGED"
  [[ -n $(grep '^??' <<< "$status") ]] && output+="$CHAR_UNTRACKED"
  [[ -n $(grep '^UU' <<< "$status") ]] && output+="$CHAR_CONFLICT"

  [[ "$stashes" == 1 ]] && output+="$CHAR_STASH"
  [[ "$ahead" == 1 ]] && output+="$CHAR_AHEAD"
  [[ "$behind" == 1 ]] && output+="$CHAR_BEHIND"

  [[ "$stashes" -gt 1 ]] && output+=" $CHAR_SASH$stashes"
  [[ "$ahead" -gt 1 ]] && output+=" $CHAR_AHEAD$ahead"
  [[ "$behind" -gt 1 ]] && output+=" $CHAR_BEHIND$behind"

  echo "$output"
}

function git_colour() {
  # ## calculates a colour based on the output of git_state
  #
  # - conflicted or diverged : red
  # - staged : green
  # - unstaged : yellow
  # - mixed : 'orange' (bold yellow)
  # - clean : white
  #
  # - unstable (stash, ahead, behind) : cyan

  local state="$1"

  local is_staged=$([[ "$state" =~ "$CHAR_STAGED" ]] && echo 1)
  local is_unstaged=$([[ "$state" =~ "$CHAR_UNSTAGED" ]] && echo 1)
  local is_untracked=$([[ "$state" =~ "$CHAR_UNTRACKED" ]] && echo 1)
  local is_conflict=$([[ "$state" =~ "$CHAR_CONFLICT" ]] && echo 1)

  local is_stash=$([[ "$state" =~ "$CHAR_STASH" ]] && echo 1)
  local is_ahead=$([[ "$state" =~ "$CHAR_AHEAD" ]] && echo 1)
  local is_behind=$([[ "$state" =~ "$CHAR_BEHIND" ]] && echo 1)
  local is_diverged=$([[ -n $is_ahead && -n $is_behind ]] && echo 1)

  local is_problem=$([[ -n $is_diverged || -n $is_conflict ]] && echo 1)
  local is_dirty=$([[ -n $is_unstaged || -n $is_untracked ]] && echo 1)
  local is_mixed=$([[ -n $is_dirty && -n $is_staged ]] && echo 1)
  local is_unstable=$([[ -n $is_stash || -n $is_ahead || -n $is_behind ]] && echo 1)

  if [[ -n $is_problem ]]; then
    echo -e $BOLD_RED
  elif [[ -n $is_mixed ]]; then
    echo -e $BOLD_MAGENTA
  elif [[ -n $is_dirty ]]; then
    echo -e $BOLD_YELLOW
  elif [[ -n $is_staged ]]; then
    echo -e $BOLD_GREEN
  elif [[ -n $is_unstable ]]; then
    echo -e $BOLD_CYAN
  else
    echo -e $WHITE
  fi
}

function git_prompt() {
    # ## string showing git branch and state
    #
    # - "[repo]/(branch)state"

    local repo=$(git rev-parse --show-toplevel 2> /dev/null)
    [[ -z "$repo" ]] && return

    local branch=$(git_branch)
    local state=$(git_state)
    local colour=$(git_colour "$state")

    echo -e "\x01$BOLD_WHITE\x02 | $(basename $repo)/\x01$colour\x02$branch$state\x01$RESET\x02"
}

PS1="\[$BOLD_WHITE\]==> "
PS1+="\[$BOLD_MAGENTA\]\T"
PS1+="\[$BOLD_WHITE\] | "
PS1+="\[$BOLD_GREEN\]\u"
PS1+='$(git_prompt)'
PS1+="\[$BOLD_WHITE\] | "
PS1+="\[$BOLD_BLUE\]\W"
PS1+="\[$BOLD_WHITE\] | \$ \[$RESET\]"

export PS1
